import subprocess #Used for pinging and also supports multi-threading
import socket #Used to gain information about the host name
import optparse #Used for program options (https://docs.python.org/3/library/optparse.html)
import re #Used to validate IP address

#The "\033[31m" in the code are used for terminal color, the output text can either be green or else red. If you see "\033[31m" in the terminal it means it cannot load color!

def program_options():
    parser = optparse.OptionParser() #This library allows the program to have options embedded into it
    
    parser.add_option("-p","--ipaddr", dest="ip_addr", help= "Enter your local IP address you wish to generate a range of") #Option and paramater for ip address input
    
    (options,args) = parser.parse_args() #Parse the options and arguments entered
    
    if not options.ip_addr: #Options are left blank
        parser.error("Please specify the IP as a paramater for the program. Use '--help' for more info!")
        
    return options #Just return options since we only use that

print(""" \033[92m 
 __    __            __                                    __               ______                                                            
/  \  /  |          /  |                                  /  |             /      \                                                           
$$  \ $$ | ______  _$$ |_   __   __   __  ______   ______ $$ |   __       /$$$$$$  |__   __   __  ______   ______   ______   ______   ______  
$$$  \$$ |/      \/ $$   | /  | /  | /  |/      \ /      \$$ |  /  |      $$ \__$$//  | /  | /  |/      \ /      \ /      \ /      \ /      \ 
$$$$  $$ /$$$$$$  $$$$$$/  $$ | $$ | $$ /$$$$$$  /$$$$$$  $$ |_/$$/       $$      \$$ | $$ | $$ /$$$$$$  /$$$$$$  /$$$$$$  /$$$$$$  /$$$$$$  |
$$ $$ $$ $$    $$ | $$ | __$$ | $$ | $$ $$ |  $$ $$ |  $$/$$   $$<         $$$$$$  $$ | $$ | $$ $$    $$ $$    $$ $$ |  $$ $$    $$ $$ |  $$/ 
$$ |$$$$ $$$$$$$$/  $$ |/  $$ \_$$ \_$$ $$ \__$$ $$ |     $$$$$$  \       /  \__$$ $$ \_$$ \_$$ $$$$$$$$/$$$$$$$$/$$ |__$$ $$$$$$$$/$$ |      
$$ | $$$ $$       | $$  $$/$$   $$   $$/$$    $$/$$ |     $$ | $$  |      $$    $$/$$   $$   $$/$$       $$       $$    $$/$$       $$ |      
$$/   $$/ $$$$$$$/   $$$$/  $$$$$/$$$$/  $$$$$$/ $$/      $$/   $$/        $$$$$$/  $$$$$/$$$$/  $$$$$$$/ $$$$$$$/$$$$$$$/  $$$$$$$/$$/       
                                                                                                                  $$ |                        
                                                                                                                  $$ |                        
                                                                                                                  $$/        
     \033[0m """) #Made for educational purposes, please use with permission of the network owner!

try:
    options = program_options() #Save the arguments and options the user enters (-p ... for example)
    
    initial_ip_address = options.ip_addr #Store the inputted IP address from paramaters in a variable
except Exception as e:
    print(f"An error has occured : {e}") #If incorrect usage is applied display a friendly message
    exit()

print("\033[31m !RUN AS ADMINISTRATOR TO AVOID ERRORS! \033[0m") #Some systems may require admin rights to ping
print("Welcome to Network Sweeper, Press 'Ctrl+C' to end the program anytime")

ip_address_validate = re.fullmatch(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$",initial_ip_address) #Use regex to validate the inputted IP address

if not ip_address_validate: #If the IP address checked above returns a false output, then IP address is not valid
    print("The IP address you have entered is not valid! Aborting")
    exit() #Exits program since an invalid IP will cause the program to crash

#IP and host details variables    
ip_address = initial_ip_address[:initial_ip_address.rfind(".")+1] #Deletes the last few numbers at the end of the entered IP address (output example: 192.0.1.) 
online_hosts = 0 #Zero online hosts by default
saved_online_hosts = [] #Store all online hosts in an array for further scanning

print("\n\nS c a n n i n g  .  .  .")

#Pinging and scanning
try: #All logic is in a try block since the following code is vital
    for subnet in range (0,256): #Loop until entire subnet is generated
        output = ip_address+str(subnet) #Concatinates the generated number to the end of the IP address string inputted by the user (Example: 192.168.0._generated_number)
        try:
            #Trying to ping generated IP address
            response = subprocess.run(['ping','-n','1',output],stdout=subprocess.PIPE) #Pings generated IP, Hides results and only stores output, Sends only one ICMP packet for performance reasons
        except Exception as e: #Catch any errors
            print(f"An error has occured when pinging : {e}")
            exit() #Exit to avoid any unwanted outputs/errors
        
        if response.returncode == 0 and not 'Destination host unreachable.' in response.stdout.decode("utf-8"): #If response generated is 0 (not an error) and ping successful, continue
            print(f"HOST IS ONLINE ->\033[32m {output} \033[0m")
            saved_online_hosts.append(output) #Save IP address of online host
            try:
                hostname, _, _ = socket.gethostbyaddr(output) #Tries to get host name by current IP address, returns tuple, we extract the hostname only here (_ represent a skip)
                print(f"HOST NAME ->\033[32m {hostname} \033[0m ")
            except socket.herror: #Capture any "host not found" errors
                print(f"HOST NAME ->\033[31m Could not be resolved \033[0m ")
                
            online_hosts += 1 #Increment online host variable by one since ping was successful
         
        elif response.returncode == 0 and "Destination host unreachable." in response.stdout.decode("utf-8"): #If response is not an error and ping was not successful, continue
            print(f"Host offline or ping blocked ->\033[31m {output} \033[0m")
            
        else:
            pass #If statement reaches this far, subprocess could not be complete the scan, skipping to avoid further issues, enter except statement if a proper error occurs

#Error handling in program            
except KeyboardInterrupt: #User pressed Ctrl+C to end the program manually
    print("\nKeyboard interrupt detected, Terminating Program!")
    exit() #Exit to avoid any unwanted outputs/errors
    
except subprocess.CalledProcessError: #If user enters IP address wrongly and subprocess library catches an error then execute this line
    print("Could not ping host/s make sure the IP address is entered correctly and try again")
    exit() #Exit to avoid any unwanted outputs/errors

except Exception as e: #Catch any other errors that may have occured
    print(f"An unknown error has occured in the program : {e}")
    exit() #Exit to avoid any unwanted outputs/errors

#Output results    
print(f"\nScan Completed Successfully! Hosts Detected on network -> \033[32m{online_hosts}\033[0m") #Show number of discovered online hosts
print(f"Online hosts found -> \033[32m {saved_online_hosts} \033[0m \n") #Show all online hosts IP address
