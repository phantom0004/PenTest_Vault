#!/usr/bin/env python

import scapy.all as scapy #Used for network tools
from argparse import ArgumentParser #Used for program options
from art import tprint #Used for ascii art
import re #Used for input validation

def program_options():
    parser = ArgumentParser()
    
    parser.add_argument("-t", "--target", dest="target_ip", help="Specify the IP address to be scanned, subnet range is an optional addition (/24)")
    
    options = parser.parse_args()
    
    if not options.target_ip:
        parser.error("Target IP not entered! Please ensure you entered it correctly by using -t. Use --help for more program information")
    
    if not re.fullmatch(r"^\d{1,3}(\.\d{1,3}){3}(\/24)?$", options.target_ip):
        parser.error("Invalid IP address format. Please try again and ensure the IP address is entered correctly!")
    
    return options.target_ip

def scan(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    
    answered_list = scapy.srp(arp_request_broadcast, timeout = 1, verbose = False)[0] 
    clients_list = []
    
    for element in answered_list:        
        client_dict = {
            "ip"  : element[1].psrc,
            "mac" : element[1].hwsrc
        }
        clients_list.append(client_dict)
        
    return clients_list

def print_result(results_list):    
    print("-----------------------------------------\nIP\t\t\t   MAC ADDRESS\n-----------------------------------------")
    
    for client in results_list:
        print(client["ip"] + "\t\t" + client["mac"])

tprint("ARP     NETWORK     SCANNER", font = "standard")  # ASCII art in red color

target_ip = program_options() #Used for program options

#Check if IP address has "/24" appended to it by the user
if not re.search(r"/24$", target_ip):
    target_ip += "/24" #Append /24 to add network range

scan_result = scan(target_ip)
print_result(scan_result)
